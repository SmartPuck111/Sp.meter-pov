// Code generated by go-bindata.
// sources:
// compiled/ScriptEngineEvent.abi
// compiled/ScriptEngineEvent.bin
// compiled/ScriptEngineEvent.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledScriptengineeventAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\xc1\x4a\xf3\x40\x14\x85\xdf\xe5\xae\xb3\xea\xcf\xef\x22\xcb\xb4\x08\x2e\xd4\x8d\xc5\x45\xe9\x62\xd2\x39\xd1\x21\xcd\x9d\x61\xe6\x4e\x6b\x28\xbe\xbb\xa4\x04\x13\x21\x2d\x8a\x62\x2c\x64\x19\x38\xdf\x64\xce\x37\xb9\x99\xd5\x81\x14\x5b\xae\x2b\x1b\x03\xa5\x85\xda\x06\x24\x64\xd8\x45\x09\x94\xae\x0e\x64\x58\xe3\x05\x9a\x52\xf1\x11\x09\xb1\xaa\x40\x29\xd9\x3d\xc3\x53\x42\x52\xbb\xe6\x51\x69\xed\x11\x02\xbd\x26\x3d\xa0\x5d\xab\x25\x54\x65\x23\x4b\x87\x44\xc3\x32\xfb\x7f\x75\x0e\x11\x5b\x82\x07\x88\xf5\x7b\x22\xb3\x91\x75\x97\xc0\x0e\x2c\xc7\x15\x2f\xb7\xd2\x92\xf3\x51\x4b\xe5\x71\x53\x42\x6e\x16\x1d\x94\xd7\x82\xf0\x6f\xf6\xeb\x26\xee\x94\x98\x1d\xb2\xe3\x7e\x16\x70\x36\x18\x19\xcd\x4a\xe1\x6d\x95\x95\x23\x6a\x39\x4d\x78\x6c\x8c\x33\xe8\xbf\xe7\x13\x85\xc4\x9e\xaa\x33\x7c\x00\x8f\x46\x9e\xb5\x57\xfb\xe9\xbb\xfc\xa0\xe5\xde\xf5\xc3\x7f\x47\xc9\xf0\x6e\xe7\x5b\x1b\x30\xcd\xd0\xf7\xa7\xe1\x16\xfe\x69\x12\xf9\x03\x22\x1f\xbc\xe2\x50\xc0\x5f\x5f\xdc\x95\xd7\x1c\xc2\x5c\xb1\x36\x5a\x09\xbe\xf8\xeb\x3d\xc7\x0d\x7b\x5a\xba\x26\x3e\xc0\xb5\xaa\xd6\x6f\x01\x00\x00\xff\xff\x45\xf4\x7a\x72\xc7\x09\x00\x00")

func compiledScriptengineeventAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledScriptengineeventAbi,
		"compiled/ScriptEngineEvent.abi",
	)
}

func compiledScriptengineeventAbi() (*asset, error) {
	bytes, err := compiledScriptengineeventAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ScriptEngineEvent.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledScriptengineeventBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\xbb\x91\xc5\x30\x0c\x43\xd1\x96\x2e\xbf\xa2\xca\x11\x4d\xab\xff\x12\x76\x1c\xec\xbc\x04\x01\xe6\x00\x49\x91\x38\xa1\xe6\x85\x44\xc2\x8d\x95\x40\x71\x27\x3a\x48\x2c\x3e\x23\xf3\xb5\xb6\xbf\xbc\x06\xbf\xe5\xbf\x86\x23\x19\xa9\xeb\xac\xb3\xd4\x88\x52\xde\xe7\xe6\x2a\x4f\x2f\x5b\xe7\x9d\xa0\x4a\xb3\xb7\xef\x9e\x90\x11\x91\x3a\xda\x57\xa6\x9f\xef\xf6\x1d\x91\xda\xd1\x38\xd6\x96\x3a\x0e\xba\xff\x02\x00\x00\xff\xff\x30\xb7\xed\xc2\xa4\x00\x00\x00")

func compiledScriptengineeventBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledScriptengineeventBin,
		"compiled/ScriptEngineEvent.bin",
	)
}

func compiledScriptengineeventBin() (*asset, error) {
	bytes, err := compiledScriptengineeventBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ScriptEngineEvent.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledScriptengineeventBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x81\x01\x00\x21\x04\x40\xd1\x95\x3e\x21\x8d\xc3\xa9\xfd\x47\xb8\x17\x24\x81\xe1\x1a\x40\xf2\x06\x4a\xc2\x43\x77\xed\xda\xba\xf0\x54\xee\xf7\x62\xa7\x85\xe5\xda\x75\xc7\xc9\xd4\xe8\x63\xa7\xc7\x65\x44\x24\x4b\xfb\xc9\xf4\x07\xbc\x3b\x22\x79\xbc\x31\x56\xaf\xd0\x31\xd0\xf3\x07\x00\x00\xff\xff\x77\x93\xd1\xc5\x6a\x00\x00\x00")

func compiledScriptengineeventBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledScriptengineeventBinRuntime,
		"compiled/ScriptEngineEvent.bin-runtime",
	)
}

func compiledScriptengineeventBinRuntime() (*asset, error) {
	bytes, err := compiledScriptengineeventBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ScriptEngineEvent.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/ScriptEngineEvent.abi": compiledScriptengineeventAbi,
	"compiled/ScriptEngineEvent.bin": compiledScriptengineeventBin,
	"compiled/ScriptEngineEvent.bin-runtime": compiledScriptengineeventBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"ScriptEngineEvent.abi": &bintree{compiledScriptengineeventAbi, map[string]*bintree{}},
		"ScriptEngineEvent.bin": &bintree{compiledScriptengineeventBin, map[string]*bintree{}},
		"ScriptEngineEvent.bin-runtime": &bintree{compiledScriptengineeventBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

