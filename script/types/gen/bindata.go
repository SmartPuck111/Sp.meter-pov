// Code generated by go-bindata.
// sources:
// compiled/ScriptEngineEvent.abi
// compiled/ScriptEngineEvent.bin
// compiled/ScriptEngineEvent.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledScriptengineeventAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\xc1\x4a\xc3\x40\x10\x86\xdf\x65\xce\x39\x55\xf4\x90\x63\x2c\x82\x07\xf5\xa2\x78\x28\x3d\x6c\xba\x7f\x74\x49\x33\xb3\xec\xce\xb6\x86\xe2\xbb\x8b\xa5\x98\x08\xa9\x08\x8a\xb1\x90\x63\x60\xbe\xc9\xfc\xdf\xee\xb0\x8b\x1d\x19\x16\x6e\x1b\x49\x91\xf2\xca\xac\x23\x32\x72\xec\x93\x46\xca\x17\x3b\x72\x6c\xf1\x02\x4b\xb9\x86\x84\x8c\xd8\x34\xa0\x9c\x64\xcb\x08\x94\x91\xb6\xfe\xfd\xd3\x58\x1b\x10\x23\xbd\x66\x3d\xe0\xd0\xeb\x40\x98\x46\x12\x6b\x87\x24\xc7\x3a\x3b\xbf\xf8\x0a\x51\xa9\xc1\x03\xc4\xf2\xa3\xa2\x90\xc4\xb6\xab\xc0\x06\xac\xfb\x8e\xa7\x1b\xe9\x81\xcb\x51\x43\x95\x69\x55\x43\xaf\xe7\x1d\x54\xb6\x8a\x78\x36\xfb\x73\x13\xb7\x46\xdd\x06\xc5\x7e\x9e\x39\xbc\x44\xa7\xa3\x59\xa9\x82\x34\x45\x3d\xa2\x96\xe3\x44\xc0\xca\x79\x87\xfe\x7f\xbe\x11\x48\xe5\x58\x9c\xe1\x03\x78\x74\xfa\x6c\x83\xd9\x4e\xf7\xf2\x93\x96\x3b\xdf\x2f\xfe\x3f\x4a\x86\xa7\xbd\x5c\x4b\xc4\xb4\x43\x3f\xdf\x86\x1b\x84\xa7\x49\xe4\x2f\x88\xbc\x0f\x86\x63\x85\x70\x35\xf4\xe4\x2d\xdf\x02\x00\x00\xff\xff\xb9\x70\xb7\xf9\x9c\x08\x00\x00")

func compiledScriptengineeventAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledScriptengineeventAbi,
		"compiled/ScriptEngineEvent.abi",
	)
}

func compiledScriptengineeventAbi() (*asset, error) {
	bytes, err := compiledScriptengineeventAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ScriptEngineEvent.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledScriptengineeventBin = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcb\xbb\x91\x06\x31\x08\x04\xe1\x94\x5a\x20\x1e\x1b\x0e\x48\x4b\xfe\x21\x5c\xad\x71\xf5\x3b\x63\x4c\x7d\xed\x24\xce\xc6\x44\x77\xb2\xcc\x61\x2c\x1c\x48\xe6\x5a\x1b\x8e\xda\x67\xd6\xfd\x5e\x7d\xbe\x1d\x85\x5f\xf9\xaf\xa1\x96\x9b\x4b\x54\x54\x88\x62\x29\x68\xdc\xeb\xf9\xce\xf2\x7d\x7a\xb4\x2b\xf2\x42\x2c\x69\x5e\x5d\x5d\x6f\x9d\xd5\x73\xac\x74\x64\xab\x30\x2a\xbd\xad\x3a\x24\x9f\x83\x0e\xc8\xf3\x17\x00\x00\xff\xff\x55\x80\x23\xa3\xa4\x00\x00\x00")

func compiledScriptengineeventBinBytes() ([]byte, error) {
	return bindataRead(
		_compiledScriptengineeventBin,
		"compiled/ScriptEngineEvent.bin",
	)
}

func compiledScriptengineeventBin() (*asset, error) {
	bytes, err := compiledScriptengineeventBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ScriptEngineEvent.bin", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledScriptengineeventBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x09\x01\xc0\x20\x08\x40\xd1\x4a\x5f\x90\x63\x71\x40\xa5\x7f\x84\x3d\x27\x71\x36\x26\x0e\x24\x73\xa1\x96\x9b\x4b\x54\x54\x88\x62\x29\x68\xdc\xeb\xf9\x66\xf9\x3e\x3d\xda\x15\x79\x21\x96\x34\x4f\x57\xd7\xab\xb3\x7a\x8e\x95\x8e\x6c\x15\x46\xa5\xb7\x55\x87\xe4\x77\xd0\x01\xf9\xfe\x00\x00\x00\xff\xff\x12\xa4\x1f\xa4\x6a\x00\x00\x00")

func compiledScriptengineeventBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledScriptengineeventBinRuntime,
		"compiled/ScriptEngineEvent.bin-runtime",
	)
}

func compiledScriptengineeventBinRuntime() (*asset, error) {
	bytes, err := compiledScriptengineeventBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ScriptEngineEvent.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/ScriptEngineEvent.abi": compiledScriptengineeventAbi,
	"compiled/ScriptEngineEvent.bin": compiledScriptengineeventBin,
	"compiled/ScriptEngineEvent.bin-runtime": compiledScriptengineeventBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"ScriptEngineEvent.abi": &bintree{compiledScriptengineeventAbi, map[string]*bintree{}},
		"ScriptEngineEvent.bin": &bintree{compiledScriptengineeventBin, map[string]*bintree{}},
		"ScriptEngineEvent.bin-runtime": &bintree{compiledScriptengineeventBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

