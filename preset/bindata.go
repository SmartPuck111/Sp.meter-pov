// Code generated by go-bindata. DO NOT EDIT.
// sources:
// shoal/delegates.json (1.55kB)
// mainnet/delegates.json (4.309kB)

package preset

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shoalDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd4\x49\xaf\x9b\x48\x17\x06\xe0\xfd\xfd\x15\xc8\x5b\xa2\xeb\x82\x2a\x6a\xb0\x94\x05\x18\x8c\x0d\x9e\x30\x1e\xf9\xf4\x29\x62\x28\xc0\x70\x31\x83\xc1\xd8\xb7\x95\xff\xde\x72\x3a\xe9\x95\x7b\x13\x65\xfb\x96\x4e\x49\xe7\x7d\xa4\xf3\xbf\x37\x41\xf8\xeb\x4d\x10\x04\x61\x70\xf1\x0b\x3e\x18\x09\x83\x56\x1a\x7c\xf9\x27\xf1\xa3\xa8\xe1\xd7\xeb\x33\x04\x77\xac\x50\x0d\x47\x3e\x26\x32\x64\x84\xf1\xb1\x82\x63\x1e\x4b\x32\xc3\x13\x49\x52\x10\x21\x08\x03\x95\x12\x46\x7e\x0d\x57\x5d\xf0\x2d\xe7\x8f\xe7\xb0\xa6\xd3\xc6\xeb\xb3\xe8\xdc\xb0\xf4\x1c\xb5\xf5\x5d\xb7\x95\x26\x08\xcc\xc6\x74\x3d\xa6\x79\x60\xc3\x68\xa6\xb6\xd5\xdd\x8e\xe6\x16\xb8\x40\x2d\x98\xf0\x19\x50\xda\xa0\x6a\x0f\xed\xcd\x52\x8e\x45\x5e\x20\x25\xb4\xfb\xca\xf4\xea\x3b\x64\x3e\xe8\x16\xb9\xcf\xc0\xd7\xd1\x68\x14\xb3\x2e\x75\xcd\x70\x7b\xdc\x68\xf9\xaa\xae\x4e\x9d\x9e\x67\x3d\xca\x8b\xf0\x56\xa8\xc6\xdc\xf4\x3b\xb2\xb0\xf6\x66\xe2\xf4\x6b\xd1\xc4\x50\xbc\x7d\xf6\xc6\x4e\x3c\x8c\x3b\xc0\xc1\x72\xa2\x15\xd6\xa4\xba\x6e\x99\xe7\x24\xb3\x9b\x5f\x7d\x56\x27\x29\xba\x9d\xed\x89\xa3\x7e\xfd\xb5\xc5\xad\x6c\xcf\x97\xe4\x5b\x55\xf6\xbc\x19\x8c\x04\x09\x80\x9f\x0f\x17\xde\xf6\x65\x93\x7f\x7b\x76\x34\x18\xfd\xec\x50\x10\x06\xe7\xea\xb9\xb1\x82\xde\x65\x05\xbd\x4b\x08\xbf\xcb\xf4\xe7\x5f\xcf\x4e\xca\xa6\x1d\x8c\x04\x8a\x09\xf8\x11\x7d\x7f\x13\x84\xef\x5f\x5e\x10\xc8\x2f\x09\x20\xd2\x74\x46\x64\x10\xa3\x88\x42\x3d\x90\x43\x1a\x91\x88\x53\xc2\xc7\x90\x06\x84\x42\x19\x02\x69\xac\xe2\x97\x04\xd3\x7a\xb8\x2c\xc2\x80\xaf\xdc\x61\x6f\xd4\x9e\x69\x9e\x56\x49\x41\xd8\xb0\x9d\xe7\xde\x03\x00\x34\x9b\x74\x28\xc9\xdc\x96\x64\x67\x7d\x18\xcf\x1b\xeb\x1a\xd9\xee\xb4\xe6\xc3\xd2\xa9\xb7\xca\x83\xd0\xb6\xc5\x53\xf8\xd9\x00\x09\xa7\xb7\x63\xcb\x87\xcb\xb6\x27\x3f\x08\x82\x65\xd5\xc7\x6e\x66\x05\xd7\x7c\x27\x85\x9f\x5a\x06\xaa\xa1\x7c\x42\x57\x00\xb3\x29\x2d\xee\xec\xb2\x17\xfd\xf4\xa8\x28\x54\x52\xa6\xcb\x8d\x09\xa0\x78\x31\xb2\xd5\x3c\x4f\xd1\x21\x5c\x26\x3b\x2e\x2f\x1c\x7b\xbf\xed\x29\x2c\x92\xe5\x8e\x5a\x1d\x61\x8b\x09\x4d\x8c\x3f\x45\xc0\xe0\xbb\x44\xa4\xdf\x30\x80\x2f\x0d\x38\x0e\x09\x94\x88\x2a\x63\xc9\x00\x48\x81\x3e\x26\x0c\x4e\x40\x68\xc8\x08\xe3\x50\x01\x34\x82\xb1\x1c\x02\xf4\xca\x40\x3d\x75\x8e\x18\x85\xd5\xd4\x5b\x93\xf8\xac\x75\x76\x0c\xa2\xa8\x65\x75\x6d\x04\x77\x9e\x0f\x15\x7d\xa2\x27\x25\x65\x24\xdc\xa0\x69\xb9\xd7\x8f\x1f\xcd\xb4\xb5\x6e\xeb\x68\x8c\x4f\x63\x6d\x81\x76\xa1\xab\xd5\x4c\xd4\x35\x93\xb1\xd9\x75\x6b\x38\x97\xd8\xf5\x7c\xe3\x69\xb0\xb6\x0f\x35\xda\x3b\xf5\xed\x88\x45\x4d\x84\x66\x73\x5b\x5d\x5c\x63\x5e\xae\x5b\x59\x4d\xed\x78\x59\x7e\xfa\x27\x74\x9e\x7d\xc2\x56\xd6\x6f\x25\x6f\xed\x48\x27\xa0\x59\x03\xa7\xdf\x52\x7c\xb8\x84\xb6\x74\xdd\xa9\x04\x2c\xac\x6c\x65\x0d\x45\xcc\x3c\xd5\x11\xd5\x3f\x66\x80\xde\x25\x20\xff\x86\x00\x7a\x29\x20\x07\x12\x00\x30\x42\x00\xeb\x10\x50\x4a\x35\x83\x06\x63\x8c\x14\xae\x20\x59\xe7\x21\x61\x18\x90\xc0\xd7\x95\x57\x02\x6b\x6d\x72\x9a\xc2\x87\xb8\x83\x9b\xc6\x5d\x1e\x82\xbe\xbe\x97\x0f\x2e\x1f\x8d\x76\x2c\x7b\xf6\x36\xa5\x5d\xf8\xe8\x1d\x87\x76\xfb\xf5\x2e\xfd\x28\x48\x59\xa5\x69\x04\xa4\xbb\x96\xe4\xa6\x66\x7d\xb8\x60\x16\xe5\xc9\x5e\x21\xe5\xc9\xed\xd7\xfc\x61\x6e\xf2\xd9\x74\xb1\x78\x0a\x7c\x6c\x0a\x63\xdc\x84\x0f\x7e\xbe\x5b\xd9\x3d\xca\xed\x0f\xcd\x3b\x18\xf3\xc7\x55\xcd\x02\xa8\xb5\x92\x72\x19\x9a\xe1\xbd\x9b\x17\x04\x60\x31\xcd\x94\xa5\xb8\x88\x86\xeb\x54\xee\x77\x5e\x55\x91\x56\x57\xfd\x6d\x9c\x4c\x02\xee\x84\x57\x63\x7a\xd8\x9a\x6c\xf5\xb1\x04\xfd\x9f\x12\xc0\xf0\x5d\xfa\xf7\x34\xff\x17\xc1\xdb\xff\xff\x0e\x00\x00\xff\xff\x39\x0b\x33\x55\x0e\x06\x00\x00")

func shoalDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_shoalDelegatesJson,
		"shoal/delegates.json",
	)
}

func shoalDelegatesJson() (*asset, error) {
	bytes, err := shoalDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shoal/delegates.json", size: 1550, mode: os.FileMode(0644), modTime: time.Unix(1658527063, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x16, 0xe5, 0x24, 0x79, 0x26, 0xe7, 0x34, 0xd7, 0x5f, 0x60, 0xc5, 0x71, 0xd8, 0x87, 0xc4, 0x46, 0xed, 0x99, 0x77, 0xc1, 0xa2, 0x28, 0xb3, 0xb3, 0x9c, 0xc3, 0xc3, 0xec, 0x5c, 0xd0, 0x70, 0x22}}
	return a, nil
}

var _mainnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd7\xc9\xaf\xa3\xca\x77\x07\xf0\x7d\xff\x15\x57\xbd\xf5\x2f\xa6\x46\xa0\x5a\x7a\x0b\x46\x03\x66\x32\x78\x24\x8a\x9e\x18\x0d\xc6\x60\xc0\xd8\xd8\x8e\xde\xff\x1e\xdd\xce\x7b\x59\x44\x8e\x22\xdd\xee\x2d\xa5\x42\xaa\xfa\xe8\x7c\x4f\x9d\x7f\xff\xf6\xf1\xf1\x9f\xdf\x3e\x3e\x3e\x3e\xbe\xb7\x71\x93\x7f\xff\xf1\xf1\xbd\x89\xab\xf6\xdf\x00\xfc\xfe\xaf\xff\xfe\x1c\x67\xd9\x90\x5f\xaf\x9f\x2b\xe0\x21\x33\x11\xe8\x05\xe6\x25\xc6\x14\xa0\x60\x99\x00\x11\x09\x4c\x03\x88\x66\xa2\x86\x54\x49\xc8\x75\x9e\x42\x40\xff\xd9\xdc\xdd\x92\x3f\xeb\xfc\xf9\xb9\x59\xd6\xb2\xfb\xc5\xba\x46\x76\x34\xa1\xa6\x59\xfa\x75\x64\x76\xf6\x0a\xcb\x8c\xb3\xc1\x14\x0f\xd3\xb5\x69\x42\x98\xb9\x46\xb8\x2f\x54\x1f\xdc\xe5\x07\x6f\x85\x87\x6b\x73\xdb\x4d\x27\x0e\x5f\x2f\xf4\xc4\x35\x2d\xf3\x8a\xb5\xe5\x38\x9a\xe3\x71\xf6\x18\x34\xa1\xef\x5d\xfe\xf8\xf1\xe3\x87\xbd\xab\xce\xa6\x5c\x75\xc3\x6a\x77\x63\x4a\xe1\x3d\x36\x0b\x47\x63\x67\xc0\x18\x23\x9b\xcb\x2b\x88\x5b\x5c\x8d\xf9\xb0\xe0\xd0\xab\x1f\x37\x2f\x8d\x6f\x27\xe4\xdf\xc5\x7b\x27\xe9\x56\xb8\x5a\xbf\x48\x91\xf4\xa8\xcc\x68\x66\x0c\x2b\xf3\xb4\xdb\x53\x81\x14\xa3\x24\xfd\xf1\xcf\x29\xee\x97\xb1\x6a\x8f\x7f\x76\x97\x29\x1f\xbe\xff\xf8\x80\x00\xfc\xbd\xd0\xe6\xe3\x74\x19\xea\x3f\x3f\xef\xe8\xfb\x8f\xbf\x2f\xf2\xe3\xe3\x7b\xd5\x7d\x9e\x18\xe2\x39\x82\x74\x0e\x01\x98\x43\xf0\xf7\xbf\x3e\xef\xe4\x32\x8c\xdf\x7f\x7c\x88\xbc\x00\x7e\x7e\xfa\xeb\xdb\xc7\xc7\x5f\xff\xfa\xbf\x1c\xd0\x5b\x07\x8c\x28\x4f\x08\x56\x74\x41\x11\x14\x3e\x65\xb2\xce\x52\x51\x20\x05\x2d\x10\x66\x08\x51\x0d\x24\x98\x88\x82\xf6\xd6\x21\x8e\x83\xa1\x20\x93\x15\x95\xe3\xe2\x7c\x6c\xaa\xa2\xb0\x16\x8f\x16\x64\x69\x20\x34\x66\x12\xd2\xde\x49\x55\xf9\x9e\x14\xea\x95\x6b\x4f\xa7\x2d\x39\x65\xe1\xbd\x4a\xd2\x55\xa6\xf1\xf1\xb1\x3e\x1f\xf3\x76\xd3\x3a\xeb\xb3\xc4\x38\x3e\xca\x70\x35\x42\xe3\xb1\x33\x3f\x1d\xb6\xb2\x60\x84\x41\x75\x11\x7a\x87\x55\x75\x27\x5f\xd5\x68\x22\x9b\x65\xb0\xad\x1f\x06\x3c\x85\x5b\x7e\x26\x6b\x6c\xec\x61\x35\xb3\xcf\x66\x66\x70\x95\x8f\x17\x85\x50\x4f\xa1\xbc\x3e\x2e\x1f\xe1\x78\x3e\x9e\x43\x89\x29\x8e\x7b\xe8\x88\x33\xdb\xe7\xee\x3e\x81\x27\x49\xfb\x5d\x0e\x84\xcc\x11\x61\x5f\x85\xc0\x6f\x21\x44\x44\x74\x59\x80\x42\x02\xa0\xcc\x23\x12\xa7\x40\x4a\x12\x35\xc1\x14\x32\x8d\x67\x98\x07\x90\xa9\x50\x41\xf9\x5b\x88\xc8\xe3\x7a\x1c\x2f\xf5\xd0\xdc\x1f\xcd\x92\x02\x7d\xe9\x8a\xaf\xb3\xeb\xd4\xa2\xb2\xcc\xaa\x43\xde\xcf\x06\xd7\x6e\x55\x53\x5f\x77\x0e\x67\x1f\x7a\xe9\x78\x8b\xd5\x9b\xfb\x7a\x18\xeb\xa3\xbe\xaf\x64\xae\x6a\x56\xf6\x89\x45\x67\x7d\xe5\x2c\xe9\x89\x53\x4e\xcc\xd7\x3e\x21\xfc\xf1\xf6\xc0\xc3\xc2\x8c\xa1\x79\x2d\x26\x61\xb3\x7d\xd2\x99\x5d\xeb\xaf\x83\x49\x74\x7d\x8b\xf1\xf5\xda\x37\x1e\xdf\xaf\x55\x31\xca\x2f\x69\xf4\x4c\x5c\x6b\x5a\xfa\xb6\xd9\x1d\x95\xdb\xe0\xa2\xf1\xb4\x52\xa7\x85\x0f\x0f\xcb\x11\xee\x23\xb2\xb0\x9d\x33\xf4\x86\xe9\xb7\x41\x08\x60\x8e\x00\xf9\x2a\x04\x79\x0b\xa1\xf1\xbc\xc8\x30\x24\x82\x24\x60\x90\x65\x52\xc1\x72\x10\xe7\x04\xc5\xaa\x90\x2b\x22\xa1\xbc\x0a\xf5\x94\x02\xf5\x1d\x84\xd5\x38\xa1\x2e\x6f\xdb\x01\x58\xe1\xfa\xc2\x3b\xa5\x35\xd0\xf5\xee\xbc\x8d\x97\x9d\x28\x8e\x66\x54\x4e\xd7\x56\xc4\x65\x3b\x4d\x52\x0c\xd1\x6e\x69\x0d\x47\xcb\x3e\x1c\x9b\xfd\x15\xa7\xb7\x2c\xba\x68\xae\x5a\xf6\xdd\x76\x67\xaf\x2f\xac\xb1\x2f\xc7\x94\x16\xd1\x9d\x7c\x42\x98\x97\x99\xc7\x86\xd1\x34\x9c\x40\x9e\xa1\x04\x2c\xa5\x56\x0a\x0e\xeb\x5c\xe8\xd4\xd9\x80\x37\x58\x1d\xb6\x21\xcb\x7c\xad\x33\x8e\xcb\xd4\xde\x87\x5d\xd6\xd6\xf5\x43\xec\x92\x22\x93\x95\x17\x2f\x5e\x67\xd7\xb1\xde\xa5\xf1\x29\x50\x34\xc3\x05\x1e\x1c\x13\x85\x1c\x7f\x17\x04\x82\x70\x8e\xf0\x97\xa3\x89\xbe\x85\x60\x00\xeb\x54\x10\x14\x1e\x08\x8c\x97\xe3\x14\x25\x71\x82\xc4\x54\x80\x2a\x4c\x65\x58\xa8\x0a\xaf\x90\x94\x00\xf6\x0e\x42\x7e\x99\xcf\x4a\x6b\x8c\x73\x39\xab\x59\x9f\xb8\xdc\x69\xb5\x6b\x76\x82\x52\xe8\xaf\x53\xd3\xba\x96\x3f\x86\x5b\xa5\xf3\x2f\x89\x31\x03\x35\x87\x5e\xc7\xd1\xaf\x52\xb2\x49\x0d\x49\xd8\x55\xde\x90\xed\x02\x3e\x96\x36\x8e\xcd\xe5\xdb\xbb\x6f\x70\x1d\xb1\x03\xf4\xf8\xd9\x22\xfc\xfb\xcd\x7d\xac\x13\x2a\xe9\x86\xb4\x6a\x22\xa3\x2c\xac\x3b\x3e\x87\xa0\x82\x59\x67\x2e\xdd\xed\xed\xb9\xb9\xc5\x56\xf8\xd2\x95\xb1\x5e\x70\x51\x99\x31\x17\x6c\xa4\x32\x67\x26\x82\x70\xb1\xb2\x01\xab\xf2\xb3\x0a\x1d\x43\x92\xee\xd9\xbd\xdf\xf4\x9c\xf1\x68\x8f\xbf\xab\x45\x20\xcc\xe6\x50\xfc\x72\x45\xf0\x6f\x21\x08\x92\x12\x2d\x15\x61\x02\xd3\x82\x50\x11\xd1\x94\xa9\xb2\x4e\x54\x9e\x51\x40\x61\x56\x30\x90\x6a\x02\x4d\xe3\xb7\x15\x91\x64\xe7\xba\xa0\xfa\xa1\x5e\xa6\xb2\x34\x5c\xa3\x4b\x89\x8c\x6a\xc1\x12\x4f\xc8\xd1\xae\x4b\x69\xe7\xaf\xd0\x3d\xbd\xee\xe9\x72\x6d\x0d\xb3\xe3\x6b\x93\x28\xcf\xfb\xb0\x2e\xb7\xfb\x78\xb1\xdc\x85\xc8\xd8\x74\xfb\xac\x8f\x68\x5d\xf8\x1e\xba\x49\xbb\x80\xdf\xc3\x9f\x3d\x42\x56\x80\x23\x64\x8d\x91\x6d\xb1\x03\xf2\x50\x5b\xbd\xf0\xfd\x5c\xcd\x5a\xac\xd7\xa1\xd8\xf8\x7e\xf8\xe2\x0e\x82\x2e\xa1\x81\xbb\x1d\xfb\xa6\x2f\x20\x4a\xc9\xc1\x76\xb7\x4a\x36\xda\x2b\xa9\x68\x9a\xe2\xb5\x2a\xf7\xcb\xd5\xba\x8f\x9f\xb3\x0b\x1e\x5c\xa7\xc0\xd2\xea\x97\x2b\x82\xa2\x39\x02\x60\x8e\x28\x9a\x53\xf4\x55\x07\xe1\x7d\x41\x68\x4c\x12\x45\x5d\x16\x33\x9d\xcf\x18\x81\x2c\x27\x94\xc7\x31\xa6\x82\x14\x13\x80\x44\xa0\x88\x22\x40\x40\x7e\x5b\x10\x16\xe4\x83\x45\x72\x3a\x3f\x6f\x6d\xb3\x53\xc4\x20\x55\xa9\x2f\x28\x0b\xc7\x00\x59\x29\xac\xf1\x54\x96\x5b\xbc\x77\x8d\x58\x91\x70\x9d\x26\xaf\xc5\x21\xbf\xa5\x44\x13\xd6\xfc\x8e\x3e\x2c\x8f\xf1\xe7\x27\xce\xb5\x8e\x26\x65\xcf\xfa\xac\xe1\x68\xd4\x25\xc4\xf9\x74\x68\x74\x23\x90\x67\xde\x92\x3b\x8b\xcf\x1c\x0d\x93\x17\xed\x3d\xa6\xb6\xe7\x1b\x19\x5a\xbf\xe7\x87\x3c\x7e\x1e\x33\x8b\x66\x72\xe5\xd5\xce\xc1\x08\xed\xb3\x05\xa4\x59\xa2\x97\xaf\x38\xa9\x67\x6b\x59\x74\x97\x8b\x07\x0f\x85\x8c\xba\x11\xcf\xec\x90\xb3\x70\x9f\xfd\x7a\x32\x51\x32\x47\x98\xce\x21\xe2\xe7\x90\xff\x72\x32\x89\x6f\x21\x52\x12\xf3\x2a\x06\x4c\xe7\x75\x81\xd2\x0c\xe4\x79\xaa\xe6\x18\x01\x82\xb0\xc8\x78\x95\x20\x8d\x12\xaa\xab\x6f\x93\xc9\xf7\xb8\xa9\xc4\xbd\x29\x5c\x1e\x95\x1b\xe9\x75\x27\x94\xee\xdd\x06\xae\xe9\x8f\xab\xf5\xcb\x73\xeb\x7d\xcf\x5d\x14\xd3\x3c\x2c\x1b\x19\x73\xfa\x2b\x58\x0a\x09\x8a\x84\xda\xe4\xa6\xb6\xc8\xf3\xa7\xa6\x2e\x93\x53\xe1\x54\xa9\x01\xeb\xa4\x78\x58\xc1\xe4\xb8\x0f\xf1\x13\x22\x8d\x1f\x43\x52\x5c\x5d\xb1\x79\xf8\x87\xb3\x5b\xb1\xf4\x55\x5e\x25\xb6\x0e\x3d\x7b\x04\xfb\x8e\x6b\x3b\xa5\x49\x8b\x92\x43\x42\x11\xa5\xd6\x71\x7d\x88\x57\xa4\x58\xb7\xfe\x81\x64\x9a\x1f\xe4\x3b\xab\xbd\x5f\x54\xf9\x15\x5f\x26\x2f\xb2\x83\x4d\x10\x9f\xe0\x94\xfc\x7a\x32\x51\x32\x17\x3f\xdf\xae\x73\x84\xbf\xaa\xc0\xde\x2a\xf0\x8a\x08\x89\xc4\xa0\xc0\x33\x84\x0a\xc2\xa3\x02\xa8\x08\x66\xa9\x4c\x21\xe2\x19\x46\x10\x29\x31\x95\x44\xf1\x6d\x2c\xad\xea\x46\xde\xf3\x4b\x44\x54\xdf\x61\x08\x5c\x97\x54\x79\x04\xba\xa6\xbd\x8a\x85\x04\x26\xf3\xe5\x06\x5c\xb2\xde\x74\x7b\x59\xeb\x98\x54\xbb\x9a\x34\x44\x16\x97\x3b\xbe\xbc\x17\x34\xae\x4e\xfd\xfb\x70\x9f\x6d\x3b\x2d\xb4\x8d\x99\xa6\x5c\xf1\x74\xdb\x78\xd9\xea\x53\xc1\xcb\x9f\x3e\xc7\x95\xb3\xa2\x3a\x22\x14\x96\xfc\x4d\xb7\x71\x3d\x6e\x47\x6f\xfd\x7c\xfa\x3d\x0a\xa4\x43\xe2\x36\x7b\xe5\x18\x98\x41\x97\x9e\x2b\xab\x44\x7b\xfe\xe5\x69\x0f\x33\x8e\xa2\xa4\xbc\x83\x70\x50\x0f\x7e\x12\x3e\xb4\xa4\x3c\xed\x48\x33\x78\x97\x3d\xf6\x57\xbf\xac\x80\xe7\x3c\x9b\x8b\x70\x2e\x7c\xd1\xe0\x7f\xe6\x8e\xff\x35\x3e\x40\x89\x27\x54\x25\x18\x60\x04\x79\x3d\x57\xd2\x02\x52\x0d\x13\x20\xa6\x2a\xc3\x24\xcb\x63\x09\x42\xc6\xc3\x77\x06\xfa\xac\x3b\xd5\x0b\x87\x25\x6a\x7b\x3a\x05\xa6\x36\xce\xf0\x4e\x44\x57\xe7\x44\xef\x45\xea\x35\x54\xdb\xae\x97\xab\x76\xb3\x19\x3b\x9f\xaa\x51\xc8\x0d\x71\xdb\x2c\x9e\x94\xeb\xfc\xe6\x85\x39\xe5\x71\x1f\x4f\xe9\xa2\x52\x6e\x81\x9b\xe5\x8d\x20\xd6\xee\x51\xa4\xcf\x9f\x91\x74\x72\x2e\xe3\x9d\x27\xce\xc5\x49\x57\x91\xdd\x56\x8b\xb8\xdc\x6b\xbb\x6b\x74\x95\x96\x50\x7c\xa6\xf7\x88\x8d\x70\x78\xe8\x5e\xbf\xba\x4d\xc5\x22\x2d\xb5\xb4\x1f\x76\x4a\x08\x0e\x01\x2b\xad\xa1\xf6\x33\xe4\x3e\x85\x7a\xa5\xad\x17\xfb\xeb\x5a\x0d\xdd\xb8\x8b\x23\xeb\xd7\x5f\xad\x78\x2e\xe0\x39\xe4\xd9\xfc\xab\x71\x04\xdf\xcf\xd2\x1a\xc4\x54\xd2\x09\x24\x5a\x41\x05\x41\x04\x42\x26\x52\x1d\x31\xa4\xa6\x1a\xe0\x05\xa5\x40\x80\xf1\x84\x09\x6f\x11\xbc\xe9\x22\x24\xed\x23\x2e\x37\x6b\x9b\xa8\x79\xb8\xb8\x90\xea\x12\xf5\x97\xf4\x0a\xed\xd3\x41\x28\x59\x36\x48\x5b\x9f\x33\xb6\x46\xb3\x97\x55\xbc\xdb\xaa\xd6\xb0\x31\xcb\x57\x6a\x06\x78\xdf\x3d\x5f\x61\x39\xb1\x60\xf7\x08\x81\x57\x09\xa2\xd8\x68\xd5\x75\xbb\x08\x7f\x8e\x0e\x51\xe2\xa7\x42\xe5\x9f\xe4\xc6\x88\x3b\x6f\xe9\xde\xae\xc6\x52\xbc\x3d\x44\x81\x41\x8b\xa7\x8f\xd5\x70\xd4\xd7\x9b\x45\xa7\x75\xbd\xb7\x2b\x51\xaa\x93\xe4\x3a\x06\xa8\xe7\x57\x1e\x2d\x2b\x2e\x7c\xd6\x7d\xbe\xbd\x4f\x7c\xd7\x57\x26\x42\xa6\x79\xf6\x29\xd0\xbc\xdf\x82\x40\xe6\x90\xc0\x39\xfa\xff\x4a\xe1\xdb\x7f\x7c\xfb\xaf\x00\x00\x00\xff\xff\x80\x44\x0a\xb0\xd5\x10\x00\x00")

func mainnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_mainnetDelegatesJson,
		"mainnet/delegates.json",
	)
}

func mainnetDelegatesJson() (*asset, error) {
	bytes, err := mainnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mainnet/delegates.json", size: 4309, mode: os.FileMode(0644), modTime: time.Unix(1658527063, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0xe, 0xce, 0x3f, 0x93, 0x15, 0x2a, 0x79, 0x82, 0xfb, 0x1, 0x8a, 0xa0, 0x82, 0xe3, 0x6c, 0x1d, 0xa5, 0x3, 0xa7, 0x34, 0x61, 0x8c, 0x32, 0x25, 0xc, 0xa, 0xf1, 0xbd, 0x14, 0xa5, 0xa1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shoal/delegates.json":   shoalDelegatesJson,
	"mainnet/delegates.json": mainnetDelegatesJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mainnet": {nil, map[string]*bintree{
		"delegates.json": {mainnetDelegatesJson, map[string]*bintree{}},
	}},
	"shoal": {nil, map[string]*bintree{
		"delegates.json": {shoalDelegatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
