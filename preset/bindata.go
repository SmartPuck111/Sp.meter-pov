// Code generated by go-bindata. DO NOT EDIT.
// sources:
// mainnet/delegates.json (1.95kB)
// shoal/delegates.json (1.55kB)

package preset

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mainnetDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd5\x4b\xcf\xa2\x4a\x1a\x07\xf0\xfd\xfb\x29\x8c\x5b\x7b\xa4\x8a\x82\x82\x32\xe9\x05\x57\x01\x01\x51\xbc\x32\x99\x74\xb8\xcb\x1d\x01\xc5\xd7\x49\x7f\xf7\x89\x3d\xdd\x3b\x4f\x4e\xd2\xa7\xb7\xf5\xe4\xa9\xe4\xf9\xff\x16\xff\x7f\x7f\x4c\x26\xff\xfd\x98\x4c\x26\x93\x69\xed\x57\xf1\x74\x31\x99\x56\x7e\x56\xff\x0b\xc0\xe9\x97\xff\x3f\xfb\x51\xd4\xc5\x7d\xff\x9a\x80\x87\x48\x78\xa0\x26\x08\x0b\x84\x48\x40\x42\x22\x03\x78\x9a\x23\x0a\xa0\xd9\x88\x57\x68\x59\xe0\x62\x15\xb3\x10\xb0\xbf\x96\xdb\x5b\xf0\xad\x88\x3f\x5f\xcb\xa2\x12\xdd\x1b\xa3\xf7\x4c\x6f\xa4\xab\x6a\xe5\x14\x9e\xde\x9a\x1b\x24\x12\xca\x04\xa3\xdf\x8d\x7d\x55\xb9\x30\xb2\x35\xf7\x94\xc8\x0e\xb8\x8b\x0f\x6c\xb8\xe7\xbe\xba\x1d\xc7\x9c\x42\x7d\xc3\xe6\x54\x55\x93\x75\xb2\x33\x2c\x4b\xb1\xd6\x94\x39\x6c\x2b\xd7\x59\x37\x5f\x17\x8b\x85\x79\xcc\x4a\x5d\xcc\xda\x6e\x73\xbc\x11\x29\x59\x3f\xf6\x4b\x4b\x21\x25\x20\x84\x30\xfb\xe6\xb9\xf5\x6b\x94\x0d\x71\xb7\xa4\xe8\xe7\x75\xd8\x3f\x15\x5c\x8f\xb4\x73\xe7\xef\xad\xa0\x1a\xee\x66\xf7\x64\x92\xe0\x4a\x5f\x22\x36\xd2\xba\x8d\x9e\x1f\x4f\x2c\xc7\x24\x83\x20\x7c\xfd\x75\xc5\xbd\x19\xb2\x3a\xfd\xd6\x36\x63\xdc\x4d\x17\x13\x08\xc0\xcf\x41\x1d\x0f\x63\xd3\x15\xdf\x5e\x19\x4d\x17\x3f\x83\x9c\x4c\xa6\x59\xfb\xba\x18\xcd\xc1\x1c\x91\x39\x4f\xff\xfc\xe7\x95\x47\xd3\x0d\xd3\xc5\x84\xc7\x1c\xf8\xf1\xf4\xfd\x63\x32\xf9\xfe\xe5\xaf\x0c\xe8\xb7\x06\x88\x66\x31\xc3\x20\x49\xe5\x24\x4e\xc2\x21\x11\x55\x12\xf2\x1c\x93\xb0\x09\x8d\x08\x4d\xb3\x0a\x08\x10\xc3\x73\xca\x5b\x03\xdf\xdf\x76\x09\x33\x1a\xde\x65\x58\x96\x69\x95\x25\x89\xb1\x7c\xd4\x20\x0a\xb7\x5c\xa5\x07\x2e\x7b\xb5\x42\x59\xbc\x07\x89\xdc\x53\x75\x9e\x1f\x98\x3c\x72\xef\x59\x10\x6e\x22\x05\xfb\x69\x51\xa6\x71\xbd\xaf\xad\x5d\x29\x10\x0a\x7b\x11\xca\x06\xa8\x3d\x8e\xfa\xcb\xe0\x20\x72\x9a\xbb\xcd\x1a\xee\x6a\x91\xac\x68\xc5\x5e\xf6\x46\x66\xbf\xda\x1e\x8a\x87\x06\x73\xf7\x80\x67\xa2\x42\x86\x2b\xcc\x66\x66\xa9\x47\x1a\x95\x39\x68\x99\x70\xc5\xe8\x8a\xbb\x74\xf5\x70\x87\x32\x2d\x5d\x81\x48\x96\x7d\x6e\x19\x6b\x76\x8a\xed\x53\x00\x73\x41\xf9\xe7\x06\x70\x0e\x11\x9e\x43\x0c\x7e\x57\x01\xbd\x55\xe0\x69\x46\x15\x39\xc8\x05\x00\x8a\x98\x66\xfc\x10\x08\x41\x20\x07\x88\x85\x44\xc1\x04\x61\x00\x89\x0c\x25\x3a\x7e\xab\xe0\xad\xa9\x2b\xf2\x57\xaa\xab\x9f\x52\xfd\xc2\x02\x75\x65\xf3\xcf\xd2\xb6\x0a\x5e\x5a\x45\xd9\x39\xbe\xce\x3a\xdb\xac\x65\x5d\xdd\xb5\x16\x65\x9e\xaf\x42\x7a\xf3\xe5\x9b\xfd\x7c\x68\xbb\x54\x3d\x65\x22\x95\x55\x1b\x33\x27\x5e\xa9\x6e\xac\x15\x9b\x53\x52\x4e\x1c\xe5\xa5\xe0\x0c\xb7\x07\xea\x96\xba\x0f\xf5\x3e\x19\xb9\xfd\xe1\x93\x9d\x99\x85\xfa\x3c\xeb\x8c\xaa\x1e\x10\xea\xfb\x6b\xb5\xc6\xd7\x9d\xcc\x7b\x71\x13\x7a\x9f\x81\x6d\x8c\x2b\xc7\xd4\xdb\x54\xba\x75\x36\x3d\xe4\x1b\x79\x5c\x3a\xf0\xbc\x1a\xe0\xc9\x63\x96\xa6\x55\xc2\x75\x37\xfe\x11\x05\x9a\x41\x73\x88\xb9\xdf\x55\x60\xde\x2a\x28\x18\xf3\x04\x41\x86\x13\x38\x04\xa2\x48\x48\x48\x0c\xfc\x98\xa1\x7d\x99\x8b\x25\x9e\x61\xb1\x0c\xd5\x90\x05\xf2\x3b\x05\xa3\xb2\x5c\x55\x3c\xd4\x1d\x30\xdc\x5d\x83\xad\x8b\xd1\xb1\xbb\x63\x79\xf0\x57\x2d\xcf\x0f\xba\x77\x19\xfb\x9a\x47\x97\x7a\x1c\x05\x1f\xd2\xc7\x95\xd1\xa5\x86\x79\x4e\xab\x53\x8f\xc2\x5b\xe4\x35\x8a\x2d\x5f\xae\xed\xe1\x68\xee\x1a\x52\x99\x4d\x1a\xb2\x89\x77\x67\x5e\x0a\x7a\x33\x5b\x93\x6e\xd0\x35\x6b\x2b\xce\xe8\x00\xac\x84\x5a\xd8\x9e\x77\x31\xd7\xca\xb3\x0e\xed\x91\xdc\x1d\x5c\x12\x39\x4a\xab\xa5\xab\xd0\x3c\xb9\x6d\x54\x17\xc5\x83\x6f\x83\x24\x12\xa5\x27\xe6\xfb\x59\x3f\x14\xc7\xd0\xcf\xb7\x92\xa2\xd9\x60\x0d\x87\x40\x62\xd2\x3f\xa0\x40\x23\x34\x67\xe7\x0c\xfe\x5d\x04\xf6\x2d\x02\x01\x48\x65\x39\x4e\xc2\x80\x23\x58\xf4\x43\x3a\xf0\x03\x9a\x0f\x39\x28\xc3\x50\x84\x89\x2c\x61\x89\x09\x19\x40\xde\x21\x88\x4f\xfd\x33\x53\x2a\xad\xbc\xcc\x0a\x72\x0d\x6c\x2a\xdf\x1c\xab\x23\x27\x25\xea\x33\xaf\x6a\xdb\x70\x06\xf7\x20\xb5\x4e\x13\x68\x33\x50\x50\xf4\x33\x1d\x9c\x2c\x64\xf6\xa1\x26\x70\xc7\x6c\xdd\x45\xc7\x2d\xf6\x85\xbd\x65\x52\xf1\xe1\xee\x68\x54\xcb\x98\x5b\xfa\xf1\xa3\x14\x9c\xfb\xcd\x7e\xec\x02\x56\x50\x35\x61\x53\x79\xda\x25\x31\xee\xa8\x74\x41\x06\xa3\x56\x5f\xd9\x87\xdb\xe7\xfe\xe6\x1b\xee\x53\x95\x86\x62\x49\x79\x97\x88\xd8\x60\x2f\x5c\x62\xa2\xd3\x10\x2e\x37\x26\x20\x59\x5c\xca\xd0\xd2\x04\xe1\x1e\xdd\xaf\xfb\x2b\xa5\x3d\xea\xf4\x0f\x94\x02\x66\xe7\xec\x8b\xe2\xef\x6a\xe1\xe3\x3f\x1f\xff\x0b\x00\x00\xff\xff\xd4\x6a\xd9\xf2\x9e\x07\x00\x00")

func mainnetDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_mainnetDelegatesJson,
		"mainnet/delegates.json",
	)
}

func mainnetDelegatesJson() (*asset, error) {
	bytes, err := mainnetDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mainnet/delegates.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7b, 0x79, 0x9d, 0x43, 0xa4, 0x55, 0xda, 0xd4, 0xf9, 0x1a, 0xf6, 0xc8, 0x34, 0x1f, 0x52, 0x78, 0x19, 0x38, 0x3b, 0x96, 0xa6, 0xa, 0x52, 0x4f, 0x16, 0x69, 0xb9, 0x91, 0xd, 0x91, 0xcf, 0xb2}}
	return a, nil
}

var _shoalDelegatesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd4\x49\xaf\x9b\x48\x17\x06\xe0\xfd\xfd\x15\xc8\x5b\xa2\xeb\x82\x2a\x6a\xb0\x94\x05\x18\x8c\x0d\x9e\x30\x1e\xf9\xf4\x29\x62\x28\xc0\x70\x31\x83\xc1\xd8\xb7\x95\xff\xde\x72\x3a\xe9\x95\x7b\x13\x65\xfb\x96\x4e\x49\xe7\x7d\xa4\xf3\xbf\x37\x41\xf8\xeb\x4d\x10\x04\x61\x70\xf1\x0b\x3e\x18\x09\x83\x56\x1a\x7c\xf9\x27\xf1\xa3\xa8\xe1\xd7\xeb\x33\x04\x77\xac\x50\x0d\x47\x3e\x26\x32\x64\x84\xf1\xb1\x82\x63\x1e\x4b\x32\xc3\x13\x49\x52\x10\x21\x08\x03\x95\x12\x46\x7e\x0d\x57\x5d\xf0\x2d\xe7\x8f\xe7\xb0\xa6\xd3\xc6\xeb\xb3\xe8\xdc\xb0\xf4\x1c\xb5\xf5\x5d\xb7\x95\x26\x08\xcc\xc6\x74\x3d\xa6\x79\x60\xc3\x68\xa6\xb6\xd5\xdd\x8e\xe6\x16\xb8\x40\x2d\x98\xf0\x19\x50\xda\xa0\x6a\x0f\xed\xcd\x52\x8e\x45\x5e\x20\x25\xb4\xfb\xca\xf4\xea\x3b\x64\x3e\xe8\x16\xb9\xcf\xc0\xd7\xd1\x68\x14\xb3\x2e\x75\xcd\x70\x7b\xdc\x68\xf9\xaa\xae\x4e\x9d\x9e\x67\x3d\xca\x8b\xf0\x56\xa8\xc6\xdc\xf4\x3b\xb2\xb0\xf6\x66\xe2\xf4\x6b\xd1\xc4\x50\xbc\x7d\xf6\xc6\x4e\x3c\x8c\x3b\xc0\xc1\x72\xa2\x15\xd6\xa4\xba\x6e\x99\xe7\x24\xb3\x9b\x5f\x7d\x56\x27\x29\xba\x9d\xed\x89\xa3\x7e\xfd\xb5\xc5\xad\x6c\xcf\x97\xe4\x5b\x55\xf6\xbc\x19\x8c\x04\x09\x80\x9f\x0f\x17\xde\xf6\x65\x93\x7f\x7b\x76\x34\x18\xfd\xec\x50\x10\x06\xe7\xea\xb9\xb1\x82\xde\x65\x05\xbd\x4b\x08\xbf\xcb\xf4\xe7\x5f\xcf\x4e\xca\xa6\x1d\x8c\x04\x8a\x09\xf8\x11\x7d\x7f\x13\x84\xef\x5f\x5e\x10\xc8\x2f\x09\x20\xd2\x74\x46\x64\x10\xa3\x88\x42\x3d\x90\x43\x1a\x91\x88\x53\xc2\xc7\x90\x06\x84\x42\x19\x02\x69\xac\xe2\x97\x04\xd3\x7a\xb8\x2c\xc2\x80\xaf\xdc\x61\x6f\xd4\x9e\x69\x9e\x56\x49\x41\xd8\xb0\x9d\xe7\xde\x03\x00\x34\x9b\x74\x28\xc9\xdc\x96\x64\x67\x7d\x18\xcf\x1b\xeb\x1a\xd9\xee\xb4\xe6\xc3\xd2\xa9\xb7\xca\x83\xd0\xb6\xc5\x53\xf8\xd9\x00\x09\xa7\xb7\x63\xcb\x87\xcb\xb6\x27\x3f\x08\x82\x65\xd5\xc7\x6e\x66\x05\xd7\x7c\x27\x85\x9f\x5a\x06\xaa\xa1\x7c\x42\x57\x00\xb3\x29\x2d\xee\xec\xb2\x17\xfd\xf4\xa8\x28\x54\x52\xa6\xcb\x8d\x09\xa0\x78\x31\xb2\xd5\x3c\x4f\xd1\x21\x5c\x26\x3b\x2e\x2f\x1c\x7b\xbf\xed\x29\x2c\x92\xe5\x8e\x5a\x1d\x61\x8b\x09\x4d\x8c\x3f\x45\xc0\xe0\xbb\x44\xa4\xdf\x30\x80\x2f\x0d\x38\x0e\x09\x94\x88\x2a\x63\xc9\x00\x48\x81\x3e\x26\x0c\x4e\x40\x68\xc8\x08\xe3\x50\x01\x34\x82\xb1\x1c\x02\xf4\xca\x40\x3d\x75\x8e\x18\x85\xd5\xd4\x5b\x93\xf8\xac\x75\x76\x0c\xa2\xa8\x65\x75\x6d\x04\x77\x9e\x0f\x15\x7d\xa2\x27\x25\x65\x24\xdc\xa0\x69\xb9\xd7\x8f\x1f\xcd\xb4\xb5\x6e\xeb\x68\x8c\x4f\x63\x6d\x81\x76\xa1\xab\xd5\x4c\xd4\x35\x93\xb1\xd9\x75\x6b\x38\x97\xd8\xf5\x7c\xe3\x69\xb0\xb6\x0f\x35\xda\x3b\xf5\xed\x88\x45\x4d\x84\x66\x73\x5b\x5d\x5c\x63\x5e\xae\x5b\x59\x4d\xed\x78\x59\x7e\xfa\x27\x74\x9e\x7d\xc2\x56\xd6\x6f\x25\x6f\xed\x48\x27\xa0\x59\x03\xa7\xdf\x52\x7c\xb8\x84\xb6\x74\xdd\xa9\x04\x2c\xac\x6c\x65\x0d\x45\xcc\x3c\xd5\x11\xd5\x3f\x66\x80\xde\x25\x20\xff\x86\x00\x7a\x29\x20\x07\x12\x00\x30\x42\x00\xeb\x10\x50\x4a\x35\x83\x06\x63\x8c\x14\xae\x20\x59\xe7\x21\x61\x18\x90\xc0\xd7\x95\x57\x02\x6b\x6d\x72\x9a\xc2\x87\xb8\x83\x9b\xc6\x5d\x1e\x82\xbe\xbe\x97\x0f\x2e\x1f\x8d\x76\x2c\x7b\xf6\x36\xa5\x5d\xf8\xe8\x1d\x87\x76\xfb\xf5\x2e\xfd\x28\x48\x59\xa5\x69\x04\xa4\xbb\x96\xe4\xa6\x66\x7d\xb8\x60\x16\xe5\xc9\x5e\x21\xe5\xc9\xed\xd7\xfc\x61\x6e\xf2\xd9\x74\xb1\x78\x0a\x7c\x6c\x0a\x63\xdc\x84\x0f\x7e\xbe\x5b\xd9\x3d\xca\xed\x0f\xcd\x3b\x18\xf3\xc7\x55\xcd\x02\xa8\xb5\x92\x72\x19\x9a\xe1\xbd\x9b\x17\x04\x60\x31\xcd\x94\xa5\xb8\x88\x86\xeb\x54\xee\x77\x5e\x55\x91\x56\x57\xfd\x6d\x9c\x4c\x02\xee\x84\x57\x63\x7a\xd8\x9a\x6c\xf5\xb1\x04\xfd\x9f\x12\xc0\xf0\x5d\xfa\xf7\x34\xff\x17\xc1\xdb\xff\xff\x0e\x00\x00\xff\xff\x39\x0b\x33\x55\x0e\x06\x00\x00")

func shoalDelegatesJsonBytes() ([]byte, error) {
	return bindataRead(
		_shoalDelegatesJson,
		"shoal/delegates.json",
	)
}

func shoalDelegatesJson() (*asset, error) {
	bytes, err := shoalDelegatesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shoal/delegates.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x16, 0xe5, 0x24, 0x79, 0x26, 0xe7, 0x34, 0xd7, 0x5f, 0x60, 0xc5, 0x71, 0xd8, 0x87, 0xc4, 0x46, 0xed, 0x99, 0x77, 0xc1, 0xa2, 0x28, 0xb3, 0xb3, 0x9c, 0xc3, 0xc3, 0xec, 0x5c, 0xd0, 0x70, 0x22}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mainnet/delegates.json": mainnetDelegatesJson,
	"shoal/delegates.json":   shoalDelegatesJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mainnet": {nil, map[string]*bintree{
		"delegates.json": {mainnetDelegatesJson, map[string]*bintree{}},
	}},
	"shoal": {nil, map[string]*bintree{
		"delegates.json": {shoalDelegatesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
